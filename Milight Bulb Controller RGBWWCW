/**
 *  Greg Santos
 *  Date: 2016-12-30
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 *  
 
 */
 
metadata {
	definition (name: "Milight Bulb Controller RGBWW/CW", namespace: "hotdun", author: "Greg Santos") {
		capability "Switch Level"
      	capability "Color Control"
		capability "Color Temperature"
        capability "Switch"
       	capability "Refresh"
		capability "Actuator"
		capability "Sensor"
        capability "Configuration"

  		attribute "whitelevel", "number"
               
        command "setAdjustedColor"
        command "setWhiteLevel"
        command "setWhite"
        command "setRainbowSwirl"
        command "setWhiteFade"
        command "setRGBWFade"
        command "setRainbowJump"
        command "setRandom"
        command "setRedTwinkle"
        command "setGreenTwinkle"
        command "setBlueTwinkle"
        
        
       }
   
    }
 
	tiles (scale: 2){      
		multiAttributeTile(name:"switch", type: "lighting", width: 6, height: 4, canChangeIcon: true){
			tileAttribute ("device.switch", key: "PRIMARY_CONTROL") {
				attributeState "on", label:'${name}', action:"switch.off", icon:"st.lights.philips.hue-single", backgroundColor:"#79b821", nextState:"turningOff"
				attributeState "off", label:'${name}', action:"switch.on", icon:"st.lights.philips.hue-single", backgroundColor:"#ffffff", nextState:"turningOn"
				attributeState "turningOn", label:'${name}', action:"switch.off", icon:"st.lights.philips.hue-single", backgroundColor:"#79b821"
				attributeState "turningOff", label:'${name}', action:"switch.on", icon:"st.lights.philips.hue-single", backgroundColor:"#ffffff"
			}
			tileAttribute ("device.level", key: "SLIDER_CONTROL") {
				attributeState "level", action:"switch level.setLevel"
			}
			tileAttribute ("device.color", key: "COLOR_CONTROL") {
				attributeState "color", action:"setAdjustedColor"
			}
        }

		valueTile("whiteTempTile", "device.whiteLevel", decoration: "flat", height: 2, width: 2) {
        	state "whiteLevel", label:'White: ${currentValue}%', backgroundColor:"#FFFFFF"
        }
        controlTile("whiteTempControl", "device.whiteLevel", "slider", decoration: "flat", height: 2, width: 4, inactiveLabel: false) {
		    state "whiteLevel", action:"setWhiteLevel"
	    }
		standardTile("switch1", "switch1", canChangeIcon: true, width: 2, height: 2) {
            state "off", label: "white", action: "setWhite", icon: "st.switches.switch.off", backgroundColor: "#ffffff"
			state "on", label: "white", action: "setWhite", icon: "st.switches.switch.on", backgroundColor: "#79b821"
		}
        standardTile("switch2", "switch2", canChangeIcon: true, width: 2, height: 2) {
            state "off", label: "swirl", action: "setRainbowSwirl", icon: "st.switches.switch.off", backgroundColor: "#ffffff"
			state "on", label: "swirl", action: "setRainbowSwirl", icon: "st.switches.switch.on", backgroundColor: "#79b821"
		}
        standardTile("switch3", "switch3", canChangeIcon: true, width: 2, height: 2) {
            state "off", label: "fade", action: "setWhiteFade", icon: "st.switches.switch.off", backgroundColor: "#ffffff"
			state "on", label: "fade", action: "setWhiteFade", icon: "st.switches.switch.on", backgroundColor: "#79b821"
		}
        standardTile("switch4", "switch4", canChangeIcon: true, width: 2, height: 2) {
            state "off", label: "RGB Fade", action: "setRGBWFade", icon: "st.switches.switch.off", backgroundColor: "#ffffff"
			state "on", label: "RGB Fade", action: "setRGBWFade", icon: "st.switches.switch.on", backgroundColor: "#79b821"
		}
        standardTile("switch5", "switch5", canChangeIcon: true, width: 2, height: 2) {
			state "off", label: "jump", action: "setRainbowJump", icon: "st.switches.switch.off", backgroundColor: "#ffffff"
            state "on", label: "jump", action: "setRainbowJump", icon: "st.switches.switch.on", backgroundColor: "#79b821"
		}
        standardTile("switch6", "switch6", canChangeIcon: true, width: 2, height: 2) {
            state "off", label: "random", action: "setRandom", icon: "st.switches.switch.off", backgroundColor: "#ffffff", nextState:"on"
			state "on", label: "random", action: "setRandom", icon: "st.switches.switch.on", backgroundColor: "#79b821", nextState:"off"
		}
		standardTile("switch4", "switch7", canChangeIcon: true, width: 2, height: 2) {
            state "off", label: "red", action: "setRedTwinkle", icon: "st.switches.switch.off", backgroundColor: "#ffffff"
			state "on", label: "red", action: "setRedTwinkle", icon: "st.switches.switch.on", backgroundColor: "#79b821"
		}
        standardTile("switch5", "switch8", canChangeIcon: true, width: 2, height: 2) {
			state "off", label: "green", action: "setGreenTwinkle", icon: "st.switches.switch.off", backgroundColor: "#ffffff"
            state "on", label: "green", action: "setGreenTwinkle", icon: "st.switches.switch.on", backgroundColor: "#79b821"
		}
        standardTile("switch6", "switch9", canChangeIcon: true, width: 2, height: 2) {
            state "off", label: "blue", action: "setBlueTwinkle", icon: "st.switches.switch.off", backgroundColor: "#ffffff", nextState:"on"
			state "on", label: "blue", action: "setBlueTwinkle", icon: "st.switches.switch.on", backgroundColor: "#79b821", nextState:"off"
		}      
    }

	main(["switch"])
	details(["switch", "levelSliderControl",
             "whiteTempControl", "whiteTempTile",
             "switch1", "switch2", "switch3",
             "switch4", "switch5", "switch6",
             "switch7", "switch8",
             "switch9"])



private toggleTiles(value) {
   def tiles = ["switch1", "switch2", "switch3", "switch4", "switch5", "switch6", "switch7", "switch8", "switch9"]
   tiles.each {tile ->
      if (tile != value) { sendEvent(name: tile, value: "off") }
      else { sendEvent(name:tile, value:"on"); sendEvent(name:"switch", value:"on") }
   }
}

def on() {
		def name = "on"
        def value = "0"
        def displayName = device.displayName
		def egHost = "192.168.31.3:81"
		def egRawCommand = "ST.${displayName}.${name}"
        def egRestCommand = java.net.URLEncoder.encode(egRawCommand)
        def egRestCommandValue = "$egRestCommand&${value}"
		log.debug "processed data event ${name} from device ${displayName} with value ${value}"
		log.debug "egRawCommand:  $egRawCommand"
		log.debug "egRestCommandValue:  $egRestCommandValue"
		sendHubCommand(new physicalgraph.device.HubAction("""GET /?$egRestCommandValue HTTP/1.1\r\nHOST: $egHost\r\n\r\n""", physicalgraph.device.Protocol.LAN))
        sendEvent(name: "switch", value: "on")
}
 
def off() {
    	def name = "off"
        def value = "0"
        def displayName = device.displayName
		def egHost = "192.168.31.3:81"
		def egRawCommand = "ST.${displayName}.${name}"
        def egRestCommand = java.net.URLEncoder.encode(egRawCommand)
        def egRestCommandValue = "$egRestCommand&${value}"
		log.debug "processed data event ${name} from device ${displayName} with value ${value}"
		log.debug "egRawCommand:  $egRawCommand"
		log.debug "egRestCommandValue:  $egRestCommandValue"
		sendHubCommand(new physicalgraph.device.HubAction("""GET /?$egRestCommandValue HTTP/1.1\r\nHOST: $egHost\r\n\r\n""", physicalgraph.device.Protocol.LAN))
        sendEvent(name: "switch", value: "off")
        sendEvent(name: "redalert", value: "off")
        sendEvent(name: "rainbowswirl", value: "off", isStateChange: true)
        sendEvent(name: "rainbowjump", value: "off")
}
 
def setLevel(level) {
		if (device.latestValue("switch") == "off") { on() }
	    def name = "level"
   	    def displayName = device.displayName
		def egHost = "192.168.31.3:81"
		def egRawCommand = "ST.${displayName}.${name}"
        def egRestCommand = java.net.URLEncoder.encode(egRawCommand)
        def egRestCommandValue = "$egRestCommand&${level}"
		log.debug "processed data event ${name} from device ${displayName} with value ${level}"
		log.debug "egRawCommand:  $egRawCommand"
		log.debug "egRestCommandValue:  $egRestCommandValue"
		sendHubCommand(new physicalgraph.device.HubAction("""GET /?$egRestCommandValue HTTP/1.1\r\nHOST: $egHost\r\n\r\n""", physicalgraph.device.Protocol.LAN))
		log.trace "setLevel($level)"
        sendEvent(name: "level", value: level)
}
 
def setAdjustedColor(value) {
	log.trace "setAdjustedColor: ${value}"
    def str = "${value.hex}"
    def colorhex = str.replace("#", "")
	def name = "color"
    def displayName = device.displayName
	def egHost = "192.168.31.3:81"
	def egRawCommand = "ST.${displayName}.${name}"
    def egRestCommand = java.net.URLEncoder.encode(egRawCommand)
    def egRestCommandValue = "$egRestCommand&${colorhex}"
	log.debug "processed data event ${name} from device ${displayName} with value ${colorhex}"
	log.debug "egRawCommand:  $egRawCommand"
	log.debug "egRestCommandValue:  $egRestCommandValue"
	sendHubCommand(new physicalgraph.device.HubAction("""GET /?$egRestCommandValue HTTP/1.1\r\nHOST: $egHost\r\n\r\n""", physicalgraph.device.Protocol.LAN))
	sendEvent(name: "color", value: colorhex)
    
}

def setWhiteLevel(whitelevel) {
	log.trace "setWhiteLevel($whitelevel)"
    def name = "whitelevel"
    def displayName = device.displayName
	def egHost = "192.168.31.3:81"
	def egRawCommand = "ST.${displayName}.${name}"
    def egRestCommand = java.net.URLEncoder.encode(egRawCommand)
    def egRestCommandValue = "$egRestCommand&${whitelevel}"
	log.debug "processed data event ${name} from device ${displayName} with value ${whitelevel}"
	log.debug "egRawCommand:  $egRawCommand"
	log.debug "egRestCommandValue:  $egRestCommandValue"
	sendHubCommand(new physicalgraph.device.HubAction("""GET /?$egRestCommandValue HTTP/1.1\r\nHOST: $egHost\r\n\r\n""", physicalgraph.device.Protocol.LAN))
	sendEvent(name: "whitelevel", value: whitelevel)
}	 

def setWhite() {
 	toggleTiles("switch1")
    def name = "party"
    def party = "'white'"
    def displayName = device.displayName
	def egHost = "192.168.31.3:81"
	def egRawCommand = "ST.${displayName}.${name}"
    def egRestCommand = java.net.URLEncoder.encode(egRawCommand)
    def egRestCommandValue = "$egRestCommand&${party}"
	log.debug "processed data event ${name} from device ${displayName} with value ${party}"
	log.debug "egRawCommand:  $egRawCommand"
	log.debug "egRestCommandValue:  $egRestCommandValue"
	sendHubCommand(new physicalgraph.device.HubAction("""GET /?$egRestCommandValue HTTP/1.1\r\nHOST: $egHost\r\n\r\n""", physicalgraph.device.Protocol.LAN))
	sendEvent(name: "white", value: "on", isStateChange: true)
}

def setRainbowSwirl() {
 	toggleTiles("switch2")
    def name = "party"
    def party = "'rainbow_swirl'"
    def displayName = device.displayName
	def egHost = "192.168.31.3:81"
	def egRawCommand = "ST.${displayName}.${name}"
    def egRestCommand = java.net.URLEncoder.encode(egRawCommand)
    def egRestCommandValue = "$egRestCommand&${party}"
	log.debug "processed data event ${name} from device ${displayName} with value ${party}"
	log.debug "egRawCommand:  $egRawCommand"
	log.debug "egRestCommandValue:  $egRestCommandValue"
	sendHubCommand(new physicalgraph.device.HubAction("""GET /?$egRestCommandValue HTTP/1.1\r\nHOST: $egHost\r\n\r\n""", physicalgraph.device.Protocol.LAN))
	sendEvent(name: "rainbowswirl", value: "on", isStateChange: true)
}

def setWhiteFade() {
    toggleTiles("switch3")
    def name = "party"
    def party = "'white_fade'"
    def displayName = device.displayName
	def egHost = "192.168.31.3:81"
	def egRawCommand = "ST.${displayName}.${name}"
    def egRestCommand = java.net.URLEncoder.encode(egRawCommand)
    def egRestCommandValue = "$egRestCommand&${party}"
	log.debug "processed data event ${name} from device ${displayName} with value ${party}"
	log.debug "egRawCommand:  $egRawCommand"
	log.debug "egRestCommandValue:  $egRestCommandValue"
	sendHubCommand(new physicalgraph.device.HubAction("""GET /?$egRestCommandValue HTTP/1.1\r\nHOST: $egHost\r\n\r\n""", physicalgraph.device.Protocol.LAN))
	sendEvent(name: "white_fade", value: "on")
 }	

def setRGBWFade() {
    toggleTiles("switch4")
    def name = "party"
    def party = "'rgbw_fade'"
    def displayName = device.displayName
	def egHost = "192.168.31.3:81"
	def egRawCommand = "ST.${displayName}.${name}"
    def egRestCommand = java.net.URLEncoder.encode(egRawCommand)
    def egRestCommandValue = "$egRestCommand&${party}"
	log.debug "processed data event ${name} from device ${displayName} with value ${party}"
	log.debug "egRawCommand:  $egRawCommand"
	log.debug "egRestCommandValue:  $egRestCommandValue"
	sendHubCommand(new physicalgraph.device.HubAction("""GET /?$egRestCommandValue HTTP/1.1\r\nHOST: $egHost\r\n\r\n""", physicalgraph.device.Protocol.LAN))
	sendEvent(name: "rgbw_fade", value: "on")
 }

def setRainbowJump() {
    toggleTiles("switch5")
    def name = "party"
    def party = "'rainbow_jump'"
    def displayName = device.displayName
	def egHost = "192.168.31.3:81"
	def egRawCommand = "ST.${displayName}.${name}"
    def egRestCommand = java.net.URLEncoder.encode(egRawCommand)
    def egRestCommandValue = "$egRestCommand&${party}"
	log.debug "processed data event ${name} from device ${displayName} with value ${party}"
	log.debug "egRawCommand:  $egRawCommand"
	log.debug "egRestCommandValue:  $egRestCommandValue"
	sendHubCommand(new physicalgraph.device.HubAction("""GET /?$egRestCommandValue HTTP/1.1\r\nHOST: $egHost\r\n\r\n""", physicalgraph.device.Protocol.LAN))
	sendEvent(name: "rainbowjump", value: "on")
 }
 
def setRandom() {
    toggleTiles("switch6")
    def name = "party"
    def party = "'random'"
    def displayName = device.displayName
	def egHost = "192.168.31.3:81"
	def egRawCommand = "ST.${displayName}.${name}"
    def egRestCommand = java.net.URLEncoder.encode(egRawCommand)
    def egRestCommandValue = "$egRestCommand&${party}"
	log.debug "processed data event ${name} from device ${displayName} with value ${party}"
	log.debug "egRawCommand:  $egRawCommand"
	log.debug "egRestCommandValue:  $egRestCommandValue"
	sendHubCommand(new physicalgraph.device.HubAction("""GET /?$egRestCommandValue HTTP/1.1\r\nHOST: $egHost\r\n\r\n""", physicalgraph.device.Protocol.LAN))
	sendEvent(name: "rainbowjump", value: "on")
 }

def setRedTwinkle() {
    toggleTiles("switch7")
    def name = "party"
    def party = "'red_twinkle'"
    def displayName = device.displayName
	def egHost = "192.168.31.3:81"
	def egRawCommand = "ST.${displayName}.${name}"
    def egRestCommand = java.net.URLEncoder.encode(egRawCommand)
    def egRestCommandValue = "$egRestCommand&${party}"
	log.debug "processed data event ${name} from device ${displayName} with value ${party}"
	log.debug "egRawCommand:  $egRawCommand"
	log.debug "egRestCommandValue:  $egRestCommandValue"
	sendHubCommand(new physicalgraph.device.HubAction("""GET /?$egRestCommandValue HTTP/1.1\r\nHOST: $egHost\r\n\r\n""", physicalgraph.device.Protocol.LAN))
	sendEvent(name: "red_twinkle", value: "on")
 }

def setGreenTwinkle() {
    toggleTiles("switch8")
    def name = "party"
    def party = "'green_twinkle'"
    def displayName = device.displayName
	def egHost = "192.168.31.3:81"
	def egRawCommand = "ST.${displayName}.${name}"
    def egRestCommand = java.net.URLEncoder.encode(egRawCommand)
    def egRestCommandValue = "$egRestCommand&${party}"
	log.debug "processed data event ${name} from device ${displayName} with value ${party}"
	log.debug "egRawCommand:  $egRawCommand"
	log.debug "egRestCommandValue:  $egRestCommandValue"
	sendHubCommand(new physicalgraph.device.HubAction("""GET /?$egRestCommandValue HTTP/1.1\r\nHOST: $egHost\r\n\r\n""", physicalgraph.device.Protocol.LAN))
	sendEvent(name: "green_twinkle", value: "on")
 }
 
 def setBlueTwinkle() {
    toggleTiles("switch9")
    def name = "party"
    def party = "'blue_twinkle'"
    def displayName = device.displayName
	def egHost = "192.168.31.3:81"
	def egRawCommand = "ST.${displayName}.${name}"
    def egRestCommand = java.net.URLEncoder.encode(egRawCommand)
    def egRestCommandValue = "$egRestCommand&${party}"
	log.debug "processed data event ${name} from device ${displayName} with value ${party}"
	log.debug "egRawCommand:  $egRawCommand"
	log.debug "egRestCommandValue:  $egRestCommandValue"
	sendHubCommand(new physicalgraph.device.HubAction("""GET /?$egRestCommandValue HTTP/1.1\r\nHOST: $egHost\r\n\r\n""", physicalgraph.device.Protocol.LAN))
	sendEvent(name: "blue_twinkle", value: "on")
 }
